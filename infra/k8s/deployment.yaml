apiVersion: apps/v1
kind: Deployment
metadata:
  name: hf-api
spec:
  replicas: 2
  selector: { matchLabels: { app: hf-api } }
  template:
    metadata: { labels: { app: hf-api } }
    spec:
      containers:
        - name: api
          image: ghcr.io/yourorg/hf-api:latest
          ports: [{ containerPort: 8080 }]
          envFrom:
            - secretRef: { name: hf-secrets }
          resources:
            requests: { cpu: "250m", memory: "512Mi" }
            limits: { cpu: "1000m", memory: "1Gi" }
          readinessProbe:
            httpGet: { path: /health, port: 8080 }
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: /health, port: 8080 }
            initialDelaySeconds: 20
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: hf-api-svc
spec:
  type: ClusterIP
  selector: { app: hf-api }
  ports:
    - port: 80
      targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hf-api-ing
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  tls:
    - hosts: [ api.hf.ai ]
      secretName: hf-api-cert
  rules:
    - host: api.hf.ai
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service: { name: hf-api-svc, port: { number: 80 } }
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hf-api-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: hf-api
  minReplicas: 2
  maxReplicas: 20
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
